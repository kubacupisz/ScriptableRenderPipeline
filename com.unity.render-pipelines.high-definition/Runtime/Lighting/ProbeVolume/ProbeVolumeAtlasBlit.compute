#pragma kernel ProbeVolumeAtlasBlitKernel PROBE_VOLUME_ATLAS_BLIT_KERNEL=ProbeVolumeAtlasBlitKernel

#ifdef SHADER_API_PSSL
#   pragma argument( scheduler=minpressure ) // instruct the shader compiler to prefer minimizing vgpr usage
#endif

#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

// #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ProbeVolume/ProbeVolumeSystem.cs.hlsl"

StructuredBuffer<SphericalHarmonicsL1> _ProbeVolumeAtlasReadBuffer;
StructuredBuffer<float> _ProbeVolumeAtlasReadValidityBuffer;
RWTexture2DArray<float4> _ProbeVolumeAtlasWriteTextureSH;

uint _ProbeVolumeAtlasReadBufferCount;
float3 _ProbeVolumeResolution;
float3 _ProbeVolumeResolutionInverse;
float4 _ProbeVolumeAtlasScaleBias;
float4 _ProbeVolumeAtlasResolutionAndInverse;

uint2 ComputeWriteIndexFromReadIndex(uint readIndex, float3 resolution, float3 resolutionInverse, float4 scaleBias, float4 atlasResolutionAndInverse)
{
    // return uint2(readIndex % 1024u, readIndex >> 10);

    // _ProbeVolumeAtlasReadBuffer[z * resolutionY * resolutionX + y * resolutionX + x]
    // TODO: Could implement as floating point operations, which is likely faster.
    // Would need to verify precision.
    uint x = readIndex % (uint)resolution.x;
    uint y = (readIndex / (uint)resolution.x) % (uint)resolution.y;
    uint z = readIndex / ((uint)resolution.y * (uint)resolution.x);

    // Atlas layout:
    // int width = resolution.x * resolution.z;
    // int height = resolution.y;
    // scaleBias: x,y is width and height (scale) z,w offset into atlas (bias)
    // Handle Z "vertical" flip, as in source, index z == 0 is "top" and index z == resolution.z - 1 is "bottom"
    // but in destination atlas, z coordinate min is "bottom", and z coordinate max is "top".
    uint atlasX = x + (resolution.z - 1 - z) * (uint)resolution.x;
    uint atlasY = y;

    float atlasU = (float)atlasX + scaleBias.z * atlasResolutionAndInverse.x;
    float atlasV = (float)atlasY + scaleBias.w * atlasResolutionAndInverse.y;

    return uint2((uint)atlasU, (uint)atlasV);
}

// Warning this needs to match with kBatchSize in ProbeVolumeSystem.cs
#define BATCH_SIZE 256
[numthreads(BATCH_SIZE, 1, 1)]
void PROBE_VOLUME_ATLAS_BLIT_KERNEL(uint groupThreadId : SV_GroupThreadID, uint groupId : SV_GroupID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint readIndex = groupId * BATCH_SIZE + groupThreadId;
    if (readIndex >= _ProbeVolumeAtlasReadBufferCount) { return; }

    uint2 writeIndex = ComputeWriteIndexFromReadIndex(
        readIndex,
        _ProbeVolumeResolution,
        _ProbeVolumeResolutionInverse,
        _ProbeVolumeAtlasScaleBias,
        _ProbeVolumeAtlasResolutionAndInverse
    );

    _ProbeVolumeAtlasWriteTextureSH[uint3(writeIndex.x, writeIndex.y, 0)] = _ProbeVolumeAtlasReadBuffer[readIndex].shAr;
    _ProbeVolumeAtlasWriteTextureSH[uint3(writeIndex.x, writeIndex.y, 1)] = _ProbeVolumeAtlasReadBuffer[readIndex].shAg;
    _ProbeVolumeAtlasWriteTextureSH[uint3(writeIndex.x, writeIndex.y, 2)] = _ProbeVolumeAtlasReadBuffer[readIndex].shAb;

    // Convert from "Occlusion" representation from Lightmapper into "Validity" representation which can be directly fed into bilateral filter.
    // This avoids computing 1.0 - occlusion terms per 8 probes per volume per pixel per frame.
    // TODO: Could additionally pre-compute and power transform here to modify curvature of validity data for filter.
    // i.e: validity = pow(validity, 4.0);
    float occlusion = _ProbeVolumeAtlasReadValidityBuffer[readIndex];
    float validity = 1.0 - occlusion;

    _ProbeVolumeAtlasWriteTextureSH[uint3(writeIndex.x, writeIndex.y, 3)] = float4(validity, 0.0, 0.0, 0.0);
}
